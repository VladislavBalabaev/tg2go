from aiogram import F, Router, types
from aiogram.filters.command import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove

from tg2go.bot.lib.message.io import ContextIO, SendDocument, SendMessage
from tg2go.core.configs.paths import PATH_TERMS_OF_USE
from tg2go.db.models.user import User
from tg2go.services.user import UserService

router = Router()

# TODO: add bot's: picture, about, description, description picture


class StartStates(StatesGroup):
    GetPhoneNumber = State()
    Terms = State()


@router.message(StateFilter(None), Command("start"))
async def CommandStart(message: types.Message, state: FSMContext) -> None:
    button = KeyboardButton(text="üì± Share my contact", request_contact=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True)

    await SendMessage(
        chat_id=message.chat.id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º\n\n"
        "–ï—Å–ª–∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫—Ä—ã—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ üéõ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É",
        reply_markup=keyboard,
    )

    await state.set_state(StartStates.GetPhoneNumber)


@router.message(StateFilter(StartStates.GetPhoneNumber))
async def CommandStartGetPhoneNumber(message: types.Message, state: FSMContext) -> None:
    if message.contact is None:
        await SendMessage(
            chat_id=message.chat.id,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
            "–ï—Å–ª–∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫—Ä—ã—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ üéõ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É",
            context=ContextIO.UserFailed,
        )
        return

    if message.contact.user_id is None or message.from_user is None:
        await SendMessage(
            chat_id=message.chat.id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–∑ —Å–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
            context=ContextIO.UserFailed,
        )
        return

    if message.contact.user_id != message.from_user.id:
        await SendMessage(
            chat_id=message.chat.id,
            text="‚ùå –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—É–∂–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.\n\n"
            "–ï—Å–ª–∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫—Ä—ã—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ üéõ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É",
            context=ContextIO.UserFailed,
        )
        return

    ctx = UserService.Create()
    await ctx.UpdateUser(
        chat_id=message.chat.id,
        column=User.phone_number,
        value=message.contact.phone_number,
    )

    await SendMessage(
        chat_id=message.chat.id,
        text="‚úÖ –°–ø–∞—Å–∏–±–æ!",
        reply_markup=ReplyKeyboardRemove(),
    )

    button = KeyboardButton(text="üìÑ –î–∞, —è –ø—Ä–∏–Ω–∏–º–∞—é")
    keyboard = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True)

    # TODO: create actual terms of service
    await SendDocument(
        chat_id=message.chat.id,
        document=types.FSInputFile(PATH_TERMS_OF_USE),
        caption="–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üìÑ –î–∞, —è –ø—Ä–∏–Ω–∏–º–∞—é\n\n"
        "–ï—Å–ª–∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫—Ä—ã—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ üéõ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É",
        reply_markup=keyboard,
    )

    await state.set_state(StartStates.Terms)
    await state.set_data({"button_text": button.text})


@router.message(StateFilter(StartStates.Terms), F.content_type == "text")
async def CommandStartTerms(message: types.Message, state: FSMContext) -> None:
    assert message.text is not None

    data = await state.get_data()
    button_text = data["button_text"]

    if message.text != button_text:
        await SendMessage(
            chat_id=message.chat.id,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –£—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üìÑ –î–∞, —è –ø—Ä–∏–Ω–∏–º–∞—é\n"
            "–ë–µ–∑ —ç—Ç–æ–≥–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.\n\n"
            "–ï—Å–ª–∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫—Ä—ã—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ üéõ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É",
            context=ContextIO.UserFailed,
        )
        return

    await SendMessage(
        chat_id=message.chat.id,
        text="‚úÖ –°–ø–∞—Å–∏–±–æ!",
        reply_markup=ReplyKeyboardRemove(),
    )

    await SendMessage(
        chat_id=message.chat.id,
        # TODO: send new order
        text="",
    )

    await state.clear()
